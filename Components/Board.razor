@inject GameState State
@using System.Drawing

<HeadContent>
    <style>
        :root {
            --board-bg:
        @ColorTranslator.ToHtml(BoardColor)
            ;
            /** the color of the board **/
            --player1:
        @ColorTranslator.ToHtml(Player1Color)
            ;
            /** Player 1's piece color **/
            --player2:
        @ColorTranslator.ToHtml(Player2Color)
            ;
            /** Player 2's piece color **/
        }

        section {
            position: absolute;
            right: 0;
            margin-right: 20px;
        }
    </style>
</HeadContent>
<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<section>
    <h3>Moves Made:</h3>
    <ul>
        @foreach (var move in Moves)
        {
            <li>@move</li>
        }
    </ul>
</section>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    <div style="margin-top: 10px;">
        <p>Player 1 Wins: @player1Wins</p>
        <p>Player 2 Wins: @player2Wins</p>
    </div>

    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;
    string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";


    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    public List<string> Moves { get; private set; } = new List<string>();

    private int player1Wins = 0;
    private int player2Wins = 0;

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            Moves.Add($"Player {player} played column {col + 1} row {landingRow}");
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        var winState = State.CheckForWin();

        if (winState == GameState.WinState.Player1_Wins)
        {
            player1Wins++;
        }
        else if (winState == GameState.WinState.Player2_Wins)
        {
            player2Wins++;
        }
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
        Moves.Clear();
    }
}